(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{331:function(t,i,v){"use strict";v.r(i);var _=v(7),a=Object(_.a)({},(function(){var t=this,i=t._self._c;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h2",{attrs:{id:"git基础使用"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git基础使用"}},[t._v("#")]),t._v(" Git基础使用")]),t._v(" "),i("h3",{attrs:{id:"git基本提交流程"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git基本提交流程"}},[t._v("#")]),t._v(" git基本提交流程")]),t._v(" "),i("ul",[i("li",[i("p",[i("code",[t._v("git init")])]),t._v(" "),i("ul",[i("li",[t._v("创建新的git仓库")])])]),t._v(" "),i("li",[i("p",[i("code",[t._v("git clone")])]),t._v(" "),i("ul",[i("li",[t._v("克隆仓库")])])]),t._v(" "),i("li",[i("p",[i("code",[t._v("git")]),t._v("工作流")]),t._v(" "),i("ul",[i("li",[t._v("本地git仓库由git维护的三棵树组成， 第一个是工作目录，持有实际文件，第二个是缓存区，用来临时保存改动，第三个是HEAD指向最后一次提交结果")])])]),t._v(" "),i("li",[i("p",[i("code",[t._v("git add filename")])]),t._v(" "),i("ul",[i("li",[t._v("将改动添加到暂存区 如果全部添加使用 "),i("code",[t._v("git add .")])])])]),t._v(" "),i("li",[i("p",[i("code",[t._v("git commit -m[message]")])]),t._v(" "),i("ul",[i("li",[t._v("git commit 命令将暂存区内容添加到本地仓库中。")]),t._v(" "),i("li",[t._v("使用git commit -a可以直接跳过git add直接提交代码")]),t._v(" "),i("li",[t._v("这时改动已经提交到了HEAD 但是没有提交到远程")])])]),t._v(" "),i("li",[i("p",[i("code",[t._v("git push")])])])]),t._v(" "),i("h3",{attrs:{id:"各种场景下指令"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#各种场景下指令"}},[t._v("#")]),t._v(" 各种场景下指令")]),t._v(" "),i("ul",[i("li",[i("code",[t._v("git reset --soft HEAD^")]),t._v(" "),i("ul",[i("li",[t._v("用于撤销commit")]),t._v(" "),i("li",[t._v("参数的意思是\n"),i("ul",[i("li",[t._v("--soft ：不删除工作空间改动代码，撤销commit，不撤销git add .")]),t._v(" "),i("li",[t._v("--mixed：不删除工作空间改动代码，撤销commit，并且撤销git add . 操作")]),t._v(" "),i("li",[t._v("--hard：删除工作空间改动代码，撤销commit，撤销git add .")])])]),t._v(" "),i("li",[t._v("HEAD^的意思是上一个版本，也可以写成HEAD~1")])])])]),t._v(" "),i("ul",[i("li",[i("code",[t._v("git stash")]),t._v(" "),i("ul",[i("li",[t._v("用于暂存代码")]),t._v(" "),i("li",[i("code",[t._v("git stash apply")]),t._v(" "),i("ul",[i("li",[t._v("从暂存栈中取出提交 但不从栈中删除")])])]),t._v(" "),i("li",[i("code",[t._v("git stash pop")]),t._v(" "),i("ul",[i("li",[t._v("从暂存栈中取出提交 会从栈中删除")])])])])]),t._v(" "),i("li",[i("code",[t._v("git merge branch")]),t._v(" 产生新的提交信息")])]),t._v(" "),i("div",{staticClass:"language-git line-numbers-mode"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[i("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# --no-ff 即 no-fast-forward 禁用快进模式")]),t._v("\n"),i("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git merge hotfix"),i("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" --no")]),t._v("-ff")]),t._v("\n")])]),t._v(" "),i("div",{staticClass:"line-numbers-wrapper"},[i("span",{staticClass:"line-number"},[t._v("1")]),i("br"),i("span",{staticClass:"line-number"},[t._v("2")]),i("br")])])])}),[],!1,null,null,null);i.default=a.exports}}]);